package com.codespine.data;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import org.apache.log4j.Logger;

import com.codespine.dto.AccesslogDTO;
import com.codespine.util.DBUtil;

/**
 * AccessLog - DAO endpoint for CRUD operations for table tbl_communication_log
 * 
 * @Author AutoGenerated by BuildJava (CodeSpine)
 * @Date Tue Aug 01 13:16:35 IST 2017
 */

public class AccessLogDAO {

	Logger errorlog = Logger.getLogger(AccessLogDAO.class);
	ErrorLogDAO errordao = new ErrorLogDAO();

	/**
	 * method to insert communication access log Records
	 * 
	 * @param pAccesslogDto
	 * @return
	 */
	public boolean insertCommunicationAccessLogRecords(AccesslogDTO pAccesslogDto) {
		Connection conn = null;
		boolean isSuccessful = false;
		PreparedStatement pStmt = null;
		ResultSet rSet = null;
		try {
			conn = DBUtil.getConnection();
			pStmt = conn.prepareStatement("INSERT INTO tbl_access_log(uri,user_id,device_ip,user_agent,content_type,"
					+ "authenticate_token,input,created_on) values(?,?,?,?,?,?,?,?)");
			int paramPos = 1;
			pStmt.setString(paramPos++, pAccesslogDto.getUri());
			pStmt.setString(paramPos++, pAccesslogDto.getUser_id());
			pStmt.setString(paramPos++, pAccesslogDto.getDevice_ip());
			pStmt.setString(paramPos++, pAccesslogDto.getUser_agent());
			pStmt.setString(paramPos++, pAccesslogDto.getContent_type());
			pStmt.setInt(paramPos++, pAccesslogDto.getAuthenticate_token());
			pStmt.setString(paramPos++, pAccesslogDto.getInput());
			pStmt.setTimestamp(paramPos++, pAccesslogDto.getCreated_on());
			isSuccessful = pStmt.execute();
		} catch (Exception e) {
			errorlog.error("AccessLogDAO/insertCommunicationAccessLogRecords", e);
			e.printStackTrace();
			errordao.insertErrorLogRecords("AccessLogDAO", "insertCommunicationAccessLogRecords",
					pAccesslogDto.toString(), "conn not closed", e.getMessage());
		} finally {
			try {
				if (rSet != null) {
					rSet.close();
				}
				if (pStmt != null) {
					pStmt.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
				errorlog.error("AccessLogDAO/insertCommunicationAccessLogRecords -- connectionNotClosed", e);
				errordao.insertErrorLogRecords("AccessLogDAO", "insertCommunicationAccessLogRecords", "conn not closed",
						"conn not closed", e.getMessage());
			}
		}
		return isSuccessful;
	}

	/**
	 * Method to insert user response details
	 * 
	 * @param pAccesslogDto
	 * @return
	 */
	public boolean insertResponseData(AccesslogDTO pAccesslogDto) {
		Connection conn = null;
		boolean isSuccessful = false;
		PreparedStatement pStmt = null;
		ResultSet rSet = null;
		try {
			conn = DBUtil.getConnection();
			pStmt = conn.prepareStatement(
					"INSERT INTO tbl_response_log(url,user_id,content_type,elapsed_time,session_expired , user_session_id,response_data) values(?,?,?,?,?,?,?) ");
			int paramPos = 1;
			pStmt.setString(paramPos++, pAccesslogDto.getUri());
			pStmt.setString(paramPos++, pAccesslogDto.getUser_id());
			pStmt.setString(paramPos++, pAccesslogDto.getContent_type());
			pStmt.setString(paramPos++, pAccesslogDto.getElapsed_time());
			pStmt.setInt(paramPos++, pAccesslogDto.getSessionExpiredTag());
			pStmt.setString(paramPos++, pAccesslogDto.getUserSessionID());
			pStmt.setString(paramPos++, pAccesslogDto.getResponse_data());
			// pStmt.setString(paramPos++, pAccesslogDto.getUser_id());
			// pStmt.setString(paramPos++, pAccesslogDto.getUser_id());
			isSuccessful = pStmt.execute();
		} catch (Exception e) {
			errorlog.error("AccessLogDAO/insertResponseData", e);
			e.printStackTrace();
			errordao.insertErrorLogRecords("AccessLogDAO", "insertResponseData", pAccesslogDto.toString() + "", null,
					e.getMessage());
		} finally {
			try {
				if (rSet != null) {
					rSet.close();
				}
				if (pStmt != null) {
					pStmt.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
				errorlog.error("AccessLogDAO/insertResponseData -- connectionNotClosed", e);
				errordao.insertErrorLogRecords("AccessLogDAO", "insertResponseData", "conn not closed",
						"conn not closed", e.getMessage());
			}
		}
		return isSuccessful;
	}

	/**
	 * Method to inset access log input records
	 * 
	 * @param pAccesslogDto
	 * @return
	 * @author Dinesh
	 */
	public boolean insertAccessLogInputRecords(AccesslogDTO pAccesslogDto) {
		Connection conn = null;
		boolean isSuccessful = false;
		PreparedStatement pStmt = null;
		ResultSet rSet = null;
		try {
			conn = DBUtil.getConnection();
			pStmt = conn.prepareStatement(
					"INSERT INTO tbl_access_log_input(user_id,path,input,created_on,device_ip,user_agent,content_type,domain)"
							+ " values(?,?,?,?,?,?,?,?)");
			int paramPos = 1;
			pStmt.setString(paramPos++, pAccesslogDto.getUser_id());
			pStmt.setString(paramPos++, pAccesslogDto.getUri());
			pStmt.setString(paramPos++, pAccesslogDto.getInput());
			// pStmt.setString(paramPos++, pAccesslogDto.getUser_id());
			pStmt.setTimestamp(paramPos++, pAccesslogDto.getCreated_on());
			// pStmt.setInt(paramPos++, 1);
			pStmt.setString(paramPos++, pAccesslogDto.getDevice_ip());
			pStmt.setString(paramPos++, pAccesslogDto.getUser_agent());
			pStmt.setString(paramPos++, pAccesslogDto.getContent_type());
			pStmt.setString(paramPos++, pAccesslogDto.getDomain());
			isSuccessful = pStmt.execute();
		} catch (Exception e) {
			errorlog.error("AccessLogDAO/insertAccessLogInputRecords", e);
			e.printStackTrace();
			errordao.insertErrorLogRecords("AccessLogDAO", "insertAccessLogInputRecords", pAccesslogDto.toString(),
					"conn not closed", e.getMessage());
		} finally {
			try {
				if (rSet != null) {
					rSet.close();
				}
				if (pStmt != null) {
					pStmt.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
				errorlog.error("AccessLogDAO/insertAccessLogInputRecords -- connectionNotClosed", e);
				errordao.insertErrorLogRecords("AccessLogDAO", "insertAccessLogInputRecords", "conn not closed",
						"conn not closed", e.getMessage());
			}
		}
		return isSuccessful;
	}

}